classDiagram
    class Recette {
        +int idRecette
        +String titre
        +Map<Ingredients, quantite> ingredientQuantite
        +String consignes
        +String categorie
        +String origine
      %%  +float noteMoyenne
    }

    class Ingredient {
        +int idIngredient
        +String nom
    }

    class Utilisateur {
        +int idUtilisateur
        +String pseudo
        +String motDePasse
        +String role
    }

    class ListeDeCourses {
        +int idListeDeCourses
        +int idUtilisateur
        +Map<Ingredient, quantite> ingredientQuantite
    }

    class Avis {
        +int idAvis
        +int idUtilisateur
        +int idRecette
        +float note
        +String commentaire
    }

    %% DAO and Service classes

    class RecetteDAO {
        +ajouterRecette() : bool
        +obtenirToutesLesRecettes() : list[Recette]
        +obtenirRecettesparLettre() : list[Recette]
        +obtenirRecettesParIngredients() : list[Recette]
        +obtenirRecettesParCategorie() : 
        +obtenirToutesLesCategories() : list[str]
      %%  +fermerConnexion() : bool
    }

    class RecetteService {
        +ajouterNouvelleRecette(Recette) : bool
        +afficherRecette() : str
        +obtenirToutesLesRecettes() : List<Recette>
        obtenirRecettesParIngredients() : list[Recette]
        +obtenirRecettesParCategorie() : 
        +obtenirToutesLesCategories() : list[str]
        +obtenirRecettesparLettre() : list[Recette]
      %%  +rechercherRecettesParIngredients(List<Ingredient>) : List<Recette>
      %%  +rechercherRecettesParLettre(str) : List<Recette>
      %%  +suggererRecettes(List<Ingredient>, List<Ingredient>) : List<Recette>
    }

    class IngredientDAO {
        +ajouterIngredient(Ingredient) : bool
        +supprimerIngredient() : bool
        +obtenirTousLesIngredients() : List<Ingredient>
        +obtenirIdParNom() : bool
    }

    class IngredientService {
        +ajouterNouvelIngredient() : bool
        +obtenirTousLesIngredients() : List<Ingredient>
        +obtenirIdParNom() : bool
        +supprimer() : bool
    }

    class UtilisateurService {
        +seConnecter(str,str) : bool
        +seDeconnecter() : bool
        +creerUnCompte() : bool
        +lister_tous() : list[Utilisateur]
        +trouver_par_id() : Utilisateur
        +modifier() : bool
        +supprimerCompte() : bool
        +pseudoDejaUtilise() : bool
     %%   +ajouterRecetteFavorite(Recette) : bool
     %%    +supprimerRecetteFavorite(Recette) : bool
     %%    +obtenirRecettesFavorites() : List<Recette> 
     %%    +ajouterIngredientFavori(Ingredient) : bool
     %%     +supprimerIngredientFavori(Ingredient) : bool
     %%     +obtenirIngrédientsFavoris() : List<Ingredient> 
     %%     +ajouterIngredientNonDesire(Ingredient) : bool
     %%     +supprimerIngredientNonDesire(Ingredient) : bool
     %%    +obtenirIngrédientsNonDesires() : List<Ingredient> 
    }

    class UtilisateurDAO {
        +se_connecter(str,str) : bool
        +creer() : bool
        +lister_tous() : list[Utilisateur]
        +trouver_par_id() : Utilisateur
        +modifier() : bool
        +supprimer() : bool
    }

    class ListeDeCoursesDAO {
        +creerListeDeCourses() : bool
        +ajouterUnIngredient() : bool
        +retirerUnIngredient() : bool
        +listerTous(): ListeDeCourses
        +obtenirIdListeDeCourses() : int
    }

    class ListeDeCoursesService {
        +creerListeDeCourses() : bool
        +ajouterUnIngredient() : bool
        +retirerUnIngredient() : bool
        +listerTous(): ListeDeCourses
        +obtenirIdListeDeCourses() : int
    }

    class AvisDAO {
        +ajouter_avis() : bool
        +obtenirAvisParRecette() : List<Avis>
        +supprimer_avis() : bool
   

    }

    class AvisService {
        +ajouterNouvelAvis() : bool
     %%   +calculerNoteMoyenne() : float
        +obtenirAvisParRecette() :  list[Avis]
        +supprimer_avis() : bool
    }

    class RecettesFavoritesDao{
      + ajouter_recette_favorite() : bool
      +supprimer_recette_favorite() : bool
      +obtenirRecettesFavorites(): list[Recette]  
    }

    class RecetteFavoritesService{
      + ajouter_recette_favorite() : bool
      +supprimer_recette_favorite() : bool
      +obtenirRecettesFavorites(): list[Recette]        
    }
    
    class IngredientFavoriDao {
        +ajouterIngredientFavori() : bool
        +obtenirIngredientsFavoris() : list[Ingredient]
        +supprimerIngredientFavori() : bool

    }

    class IngredientFavoriService {
        +ajouterIngredientFavori() : bool
        +obtenirIngredientsFavoris() : list[Ingredient]
        +supprimerIngredientFavori() : bool        
    }

    class IngredientNonDesireDao {
        +ajouterIngredientNonDesire() : bool
        +supprimerIngredientNonDesire() : bool
        +obtenirIngredientsNonDesires() :list[Ingredient]
    }
    
    class IngredientNonDesireService {
        +ajouterIngredientNonDesire() : bool
        +supprimerIngredientNonDesire() : bool
        +obtenirIngredientsNonDesires() :list[Ingredient]
    }
    %% Relations
    RecetteService --> RecetteDAO : utilise
    RecetteDAO --> Recette : gère
    RecettesFavoritesDao --> RecetteFavoritesService : utilise
    
    IngredientService --> IngredientDAO : utilise
    IngredientDAO --> Ingredient : gère
    
    IngredientFavoriDao --> IngredientFavoriService : utilise
    IngredientNonDesireDao --> IngredientNonDesireService : utilise
    UtilisateurService --> UtilisateurDAO : utilise
    UtilisateurDAO --> Utilisateur : gère

    ListeDeCoursesDAO --> ListeDeCoursesService : utilise
    ListeDeCoursesDAO --> ListeDeCourses : gère

    AvisService --> AvisDAO : utilise
    AvisDAO --> Avis : gère

    %% Cardinalities
    Utilisateur "1" --> "0..*" Avis : donne des avis
    Utilisateur "1" --> "0..1" ListeDeCourses : possède
    Recette "1.."--* "1.." Ingredient : contient
    ListeDeCourses "1.."--* "1.." Ingredient : contient
    Recette "1" --> "0..*" Avis : reçoit
    Utilisateur "1" --> "0..*" Recette : ajoute comme favori
    Utilisateur "1" --> "0..*" Ingredient : gère
    
    
